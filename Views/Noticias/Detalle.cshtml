@model PetConnect.Models.Noticia
@using Microsoft.AspNetCore.Identity
@using PetConnect.Models 
@inject SignInManager<IdentityUser> SignInManager 

<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,400,0,0" />

<style>
    
    body { background-color: #FFFDEC; font-family: 'Arial', sans-serif; margin: 0; padding: 0; }
    .noticia-wrapper { display: flex; justify-content: center; align-items: flex-start; padding: 2rem; gap: 3rem; background-color: #748675; border-bottom: 2px solid #ddd; }
    .noticia-info { flex: 1; max-width: 500px; display: flex; flex-direction: column; justify-content: center; position: relative; padding-right: 70px; }
    .breadcrumbs { margin-bottom: 1.5rem; font-size: 0.9rem; }
    .breadcrumbs a { text-decoration: none; }
    .noticia-titulo { font-size: 3rem; font-weight: 700; color: #FFFDEC; line-height: 1.2; margin-bottom: 1rem; }
    .noticia-fecha { font-size: 1rem; color: #FFFDEC; margin-top: 0; }
    .noticia-imagen-container { flex: 1.5; max-width: 600px; }
    .noticia-imagen { width: 100%; height: auto; object-fit: cover; border-radius: 12px; }
    .contenido-principal { max-width: 900px; margin: 2rem auto; padding: 2rem; background-color: #FFFDEC; border-radius: 12px; }
    .noticia-parrafo p { font-size: 1.1rem; line-height: 1.5; color: #444; }
  
    .noticia-parrafo ul,
    .noticia-parrafo ol {
        line-height: 1.5;     
        margin-top: 0.5rem;     
        margin-bottom: 1rem;    
        padding-left: 1.5rem;   
    }

   
    .noticia-parrafo li {
        margin-bottom: 0.25rem; 
    }

    .noticia-parrafo h2,
    .noticia-parrafo h3 {
        margin-top: 1.5rem;     
        margin-bottom: 0.5rem;  
    }

    /* Estilos Botón Favorito */
    .favorito-btn { position: absolute; top: 0; right: 0; background-color: #fce4e4; border: none; border-radius: 50%; width: 50px; height: 50px; display: flex; justify-content: center; align-items: center; cursor: pointer; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); transition: transform 0.2s, background-color 0.2s; }
    .favorito-btn:hover { background-color: #fce4e4; transform: scale(1.1); }
    .favorito-btn.activo { background-color: #ebadad; }
    
    .noticia-info .favorito-btn > .material-symbols-outlined {
        font-size: 28px;
        color: white; 
        transition: all 0.2s ease;
    }
    .noticia-info .favorito-btn.activo > .material-symbols-outlined {
        color: #e58f8f !important; /* Color relleno activo */
        transform: scale(1.1);
    }

    /* --- Estilos Comentarios --- */
    .comentarios-container { margin-top: 3rem; padding: 2rem; background-color: #fff6f6; border-radius: 12px; box-shadow: 0 4px 8px rgba(0,0,0,0.05); }
    .comentario { background-color: #fefefe; border-left: 4px solid #72626e; border-radius: 8px; padding: 1.2rem; margin-bottom: 1.5rem; }
    .comentario-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.5rem; }
    .comentario-autor { font-weight: bold; color: #555; margin-bottom: 0; }
    .comentario-texto { color: #333; line-height: 1.6; }
    .comentario-fecha { font-size: 0.8rem; color: #aaa; text-align: right; margin-top: 0.5rem; }
    
    /* Estilos Botones Editar/Eliminar */
    .comentario-acciones { display: flex; gap: 0.5rem; }
    .btn-accion-comentario { background: none; border: none; cursor: pointer; padding: 0; color: #aaa; transition: color 0.2s ease; }
    .btn-accion-comentario .material-symbols-outlined { font-size: 1.1rem; vertical-align: middle; }
    .btn-accion-comentario:hover { color: #72626e; }
    .btn-eliminar-comentario:hover { color: #d67a7a; } /* Rojo hover */
    
    /* Estilos Formulario Comentario */
    .form-comentario { margin-top: 2rem; }
    .form-comentario label { font-weight: bold; color: #72626e; display: block; margin-bottom: 0.5rem; }
    .form-comentario textarea { width: 100%; height: 120px; padding: 0.75rem; border-radius: 8px; border: 1px solid #ccc; resize: vertical; font-size: 1rem; }
    .form-comentario button { margin-top: 1rem; padding: 0.75rem 1.5rem; background-color: #72626e; color: white; border: none; border-radius: 8px; cursor: pointer; transition: background-color 0.3s ease, transform 0.2s ease; }
    .form-comentario button:hover { background-color: #5a4b56; transform: translateY(-2px); }
    
    /* --- Estilos Modales (Login y Confirmación) --- */
    .modal-overlay { 
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.6);
        display: none;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }
    .modal-confirmacion-eliminar {
        position: fixed; 
        top: 50%; 
        left: 50%; 
        transform: translate(-50%, -50%); 
        z-index: 1000; 
        display: none; 
        
    }
    .modal-contenido {
        background-color: #fefefe; 
        padding: 2.5rem;
        border-radius: 12px;
        box-shadow: 0 8px 30px rgba(0, 0, 0, 0.3);
        text-align: center;
        position: relative;
        max-width: 450px;
        width: 90%;
        animation: fadeIn 0.3s ease-out;
        pointer-events: auto; /
    }
    .close-button, .modal-cerrar-eliminar-comentario { position: absolute; top: 15px; right: 20px; font-size: 1.8rem; font-weight: bold; cursor: pointer; color: #aaa; transition: color 0.2s; }
    .close-button:hover, .modal-cerrar-eliminar-comentario:hover { color: #5a4b56; }
    .modal-body h3, .modal-titulo-eliminar { color: #d67a7a; font-size: 1.5rem; margin-bottom: 1.5rem; }
    .modal-body p, .modal-mensaje-eliminar { font-size: 1.1rem; margin-bottom: 2rem; color: #5a4b56; }
    .login-button-group, .modal-botones-eliminar { display: flex; justify-content: center; align-items: center; gap: 15px; width: 100%; max-width: 350px; margin: 0 auto; }
    .login-button, .register-link, .btn-modal-accion { flex: 1; display: flex; justify-content: center; align-items: center; height: 50px; border-radius: 8px; font-weight: bold; text-decoration: none; border: 2px solid #72626e; box-sizing: border-box; transition: all 0.3s ease; font-size: 1rem; cursor: pointer; }
    .login-button { background-color: #72626e; color: white; }
    .register-link { background-color: transparent; color: #72626e; }
    .login-button:hover { background-color: #5a4b56; border-color: #5a4b56; transform: translateY(-2px); }
    .register-link:hover { background-color: #72626e; color: white; transform: translateY(-2px); }
    .btn-modal-accion { padding: 12px 25px; height: auto; }
    .btn-modal-confirmar { background-color: #d67a7a; color: white; }
    .btn-modal-confirmar:hover { background-color: #c06969; transform: translateY(-2px); }
    .btn-modal-cancelar { background-color: #f0f0f0; color: #555; border-color: #ddd; }
    .btn-modal-cancelar:hover { background-color: #e0e0e0; transform: translateY(-2px); }

    /*  Estilos Íconos  */
    .material-symbols-outlined {
      font-family: 'Material Symbols Outlined' !important; 
      font-weight: normal;
      font-style: normal;
      font-size: 24px; 
      line-height: 1;
      letter-spacing: normal;
      text-transform: none;
      display: inline-block;
      white-space: nowrap;
      word-wrap: normal;
      direction: ltr;
      -webkit-font-feature-settings: 'liga';
      -webkit-font-smoothing: antialiased;
    }
   
    .btn-accion-comentario .material-symbols-outlined {
        font-size: 1.2rem;
    }
   
    .noticia-info .favorito-btn > .material-symbols-outlined {
        font-size: 28px;
    }
   
    .comentario-texto.editando {
        display: none; 
    }

    .form-editar-comentario {
        display: none; 
        flex-direction: column; 
        gap: 0.5rem;
        margin-top: 0.5rem;
    }

    .comentario.modo-edicion .form-editar-comentario {
        display: flex; 
    }

    .comentario.modo-edicion .comentario-texto {
        display: none; 
    }

    .comentario.modo-edicion .comentario-acciones {
        display: none; 
    }

    .textarea-editar-comentario {
        width: 100%;
        min-height: 80px;
        padding: 0.5rem;
        border-radius: 6px;
        border: 1px solid #ccc;
        font-family: 'Arial', sans-serif;
        font-size: 1rem;
        resize: vertical;
    }

    .botones-editar {
        display: flex;
        justify-content: flex-end; 
        gap: 0.5rem;
    }
    .btn-guardar-edicion, .btn-cancelar-edicion {
        padding: 0.5rem 1rem;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        font-weight: bold;
    }
    .btn-guardar-edicion {
        background-color: #72626e; 
        color: white;
    }
    .btn-cancelar-edicion {
        background-color: #f0f0f0; 
        color: #555;
    }

    .comentario-header {
        display: flex;
        align-items: center; /* Alinea verticalmente la foto y el nombre */
        margin-bottom: 0.5rem;
        gap: 10px; /* Espacio entre la foto y el nombre */
    }

    .comentario-foto-perfil {
        width: 40px;  /* Tamaño de la foto */
        height: 40px;
        border-radius: 50%; /* La hace redonda */
        object-fit: cover;  /* Evita que la imagen se deforme */
        flex-shrink: 0;     /* Evita que la imagen se encoja */
    }

    .comentario-autor {
        font-weight: bold;
        color: #555;
        margin-bottom: 0;
        flex-grow: 1; /* Esto empuja las 'acciones' a la derecha */
    }
    
    @@keyframes fadeIn {
        from { opacity: 0; transform: translateY(-20px); }
        to { opacity: 1; transform: translateY(0); }
    }
</style>

<div class="noticia-wrapper">
    <div class="noticia-info">
        <div class="breadcrumbs">
            <a href="@Url.Action("Index", "Home")" style="color: #FFFDEC;">Inicio</a> 
            <span style="color: #FFFDEC;">»</span> 
            <a href="@Url.Action("Index", "Noticias")" style="color: #FFFDEC;">Noticias</a>
            <span style="color: #FFFDEC;">»</span>
            <span style="font-weight: bold; color: #d67a7a;">@Model.Titulo</span>
        </div>
        
        @{
            bool esFavoritoInicial = ViewData["EsFavorito"] as bool? ?? false; 
        }
        <button id="favorito-btn" class="favorito-btn @(esFavoritoInicial ? "activo" : "")" title="Guardar en favoritos" data-id="@Model.Id"> 
            <span class="material-symbols-outlined">
                @(esFavoritoInicial ? "favorite" : "favorite_border") 
            </span>
        </button>

        <h1 class="noticia-titulo">@Model.Titulo</h1>
        <p class="noticia-fecha">@Model.FechaPublicacion.ToShortDateString()</p>
    </div>
    <div class="noticia-imagen-container">
        <img src="@Model.UrlImagen" alt="@Model.Titulo" class="noticia-imagen" />
    </div>
</div>

<div class="contenido-principal">
    @Html.AntiForgeryToken()
    <article class="noticia-parrafo">
        @Html.Raw(Model.Contenido)
    </article>

    <section class="comentarios-container">
    <h3>Comentarios</h3>

    <div id="lista-comentarios">
        @if (Model.Comentarios != null && Model.Comentarios.Any())
        {
            @foreach (var comentario in Model.Comentarios.OrderByDescending(c => c.FechaComentario))
            {
                bool puedeEditar = false;
                bool authorMatch = false;
                bool canEditTime = false;   
                TimeSpan difference = TimeSpan.Zero;
                string currentUsername = "No Logueado";

                if (SignInManager.IsSignedIn(User))
                {
                    currentUsername = User.Identity?.Name ?? string.Empty;
                    if (currentUsername.Contains("@"))
                    {
                        currentUsername = currentUsername.Split('@')[0];
                    }
                    
                    authorMatch = currentUsername == comentario.Autor;
                    
                    if (authorMatch)
                    {
                        // --- INICIO DE LA CORRECCIÓN RAZOR ---
                        // Asumimos que la fecha del comentario se guardó en UTC.
                        var fechaComentarioUtc = comentario.FechaComentario;
                        
                        // Si EF no especificó el Kind, lo forzamos a UTC.
                        if (fechaComentarioUtc.Kind == DateTimeKind.Unspecified)
                        {
                            fechaComentarioUtc = DateTime.SpecifyKind(fechaComentarioUtc, DateTimeKind.Utc);
                        }

                        // Ahora calculamos la diferencia con seguridad
                        difference = DateTime.UtcNow - fechaComentarioUtc; 
                        // --- FIN DE LA CORRECCIÓN RAZOR ---

                        canEditTime = difference.TotalMinutes < 15 && difference.TotalMinutes >= 0;
                        puedeEditar = canEditTime;
                    }
                }

                <div class="comentario" data-comentario-id="@comentario.Id">
                    <div class="comentario-header">

                        <img class="comentario-foto-perfil" 
                            src="@(comentario.AutorFotoUrl ?? "/images/avatars/default.png")" 
                            alt="@comentario.Autor" />

                        <p class="comentario-autor">@comentario.Autor</p>
                        
                        <div class="comentario-acciones">
                            @if (puedeEditar)
                            {
                                <button class="btn-accion-comentario btn-editar-comentario" title="Editar comentario">
                                    <span class="material-symbols-outlined">edit</span>
                                </button>
                            }

                            @if (authorMatch) 
                            {
                                <button class="btn-accion-comentario btn-eliminar-comentario" title="Eliminar comentario">
                                    <span class="material-symbols-outlined">delete</span>
                                </button>
                            }
                        </div>
                    </div>
                    <p class="comentario-texto">@comentario.Texto</p>
                    <p class="comentario-fecha">
                        <span data-utcdate="@comentario.FechaComentario.ToString("o")">cargando...</span>
                    </p>
                </div>
            }
           }
        else
        {
            <p id="sin-comentarios-msg">No hay comentarios todavía. ¡Sé el primero!</p>
        }
    </div>

    <form id="form-agregar-comentario" class="form-comentario">
        @Html.AntiForgeryToken() 
        <input type="hidden" name="NoticiaId" value="@Model.Id" /> 
        <label for="textoComentario">Deja un comentario</label>

        @if (SignInManager.IsSignedIn(User))
        {
            <textarea id="textoComentario" name="TextoComentario" required minlength="3" maxlength="500" 
                    placeholder="Escribe tu comentario... "></textarea>
        }
        else
        {
            <textarea id="textoComentario" name="TextoComentario" 
                    placeholder="Inicia sesión para dejar un comentario..." disabled></textarea>
        }
        @if (SignInManager.IsSignedIn(User))
        {
            <button type="submit" class="btn-comentar">Comentar</button> 
        }
        else
        {
            <button type="button" class="btn-comentar" id="btn-abrir-login-modal" style="margin-top: 1rem;">Inicia sesión para comentar</button>
        }
    </form>
    </section>

    <div id="modal-confirmacion-eliminar-comentario" class="modal-confirmacion-eliminar">
        <div class="modal-contenido">
            <span class="modal-cerrar-eliminar-comentario">&times;</span>
            <h3 class="modal-titulo-eliminar">Confirmar Eliminación</h3>
            <p class="modal-mensaje-eliminar">¿Estás seguro de que deseas eliminar este comentario?</p>
            <div class="modal-botones-eliminar">
                <button id="btn-confirmar-eliminar-comentario" class="btn-modal-accion btn-modal-confirmar">Eliminar</button>
                <button id="btn-cancelar-eliminar-comentario" class="btn-modal-accion btn-modal-cancelar">Cancelar</button>
            </div>
        </div>
    </div>

</div>

<div id="login-modal" class="modal-overlay">
    <div class="modal-contenido">
        <span class="close-button">&times;</span>
        <div class="modal-body">
             <h3>Acceso Requerido</h3>
             <p>¡Hola! Debes iniciar sesión o registrarte para comentar y guardar esta noticia en favoritos.</p>
             <div class="login-button-group">
                 <a href="/Identity/Account/Login" class="login-button">Iniciar Sesión</a>
                 <a href="/Identity/Account/Register" class="register-link">Registrarse</a>
             </div>
        </div>
    </div>
</div>

<script>
    function formatDateElement(spanElement) {
        const utcDateString = spanElement.dataset.utcdate;
        if (!utcDateString) return;
        try {
            const date = new Date(utcDateString);
            const options = { year: 'numeric', month: 'numeric', day: 'numeric', hour: 'numeric', minute: 'numeric', hour12: true };
            spanElement.textContent = date.toLocaleString(undefined, options);
        } catch (e) {
            console.error("Error formateando fecha:", utcDateString, e);
            spanElement.textContent = "Fecha inválida";
        }
    }

document.addEventListener('DOMContentLoaded', function() { 

    const loginModal = document.getElementById('login-modal');
    const closeButton = loginModal ? loginModal.querySelector('.close-button') : null;
    const favoritoBtn = document.getElementById('favorito-btn');
    const formComentario = document.getElementById('form-agregar-comentario');
    const textoComentarioInput = document.getElementById('textoComentario');
    const listaComentariosDiv = document.getElementById('lista-comentarios');
    const sinComentariosMsg = document.getElementById('sin-comentarios-msg');
    const comentarBtnSubmit = formComentario ? formComentario.querySelector('button[type="submit"]') : null;
    const modalConfirmacionComentario = document.getElementById('modal-confirmacion-eliminar-comentario');
    const cerrarModalConfirmacionComentarioBtn = modalConfirmacionComentario ? modalConfirmacionComentario.querySelector('.modal-cerrar-eliminar-comentario') : null;
    const btnConfirmarEliminarComentario = document.getElementById('btn-confirmar-eliminar-comentario');
    const btnCancelarEliminarComentario = document.getElementById('btn-cancelar-eliminar-comentario');
    let comentarioIdParaEliminar = null;
    const estaAutenticadoServer = '@User.Identity.IsAuthenticated.ToString().ToLower()' === 'true';

    function mostrarModal() { if (loginModal) loginModal.style.display = 'flex'; }
    if (!estaAutenticadoServer && textoComentarioInput) {

        textoComentarioInput.addEventListener('click', function(event) {
            event.preventDefault(); 
            mostrarModal();    
        });
    }
    if (!estaAutenticadoServer) {
        const btnAbrirLogin = document.getElementById('btn-abrir-login-modal');
        if (btnAbrirLogin) {
            btnAbrirLogin.addEventListener('click', function() {
                mostrarModal();
            });
        }
    }
    function ocultarModal() { if (loginModal) loginModal.style.display = 'none'; }
    function mostrarModalConfirmacionComentario(id) {
        comentarioIdParaEliminar = id;
        if (modalConfirmacionComentario) modalConfirmacionComentario.style.display = 'block';
        if (btnConfirmarEliminarComentario) btnConfirmarEliminarComentario.disabled = false;
    }
    function ocultarModalConfirmacionComentario() {
        if (modalConfirmacionComentario) modalConfirmacionComentario.style.display = 'none';
        comentarioIdParaEliminar = null;
        if (btnConfirmarEliminarComentario) btnConfirmarEliminarComentario.disabled = false;
    }


    if (closeButton) closeButton.addEventListener('click', ocultarModal);
    window.addEventListener('click', (event) => { if (event.target === loginModal) ocultarModal(); });
    if (cerrarModalConfirmacionComentarioBtn) cerrarModalConfirmacionComentarioBtn.addEventListener('click', ocultarModalConfirmacionComentario);
    if (btnCancelarEliminarComentario) btnCancelarEliminarComentario.addEventListener('click', ocultarModalConfirmacionComentario);
    window.addEventListener('click', function(event) { if (event.target == modalConfirmacionComentario) ocultarModalConfirmacionComentario(); });

 
    function manejarClicFavoritoDetalle() {
        if (estaAutenticadoServer) {
            const noticiaId = favoritoBtn.dataset.id;
            const tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
            if (!tokenInput) { console.error('No se encontró AntiForgeryToken.'); alert('Error seguridad. Recarga.'); return; }
            const token = tokenInput.value;
            fetch('/Noticias/ToggleFavorito', { 
                method: 'POST', 
                headers: { 'Content-Type': 'application/json', 'RequestVerificationToken': token },
                body: JSON.stringify(parseInt(noticiaId)) 
            })
            .then(response => { if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`); return response.json(); })
            .then(data => {
                 if (data.success) {
                    favoritoBtn.classList.toggle('activo', data.esFavorito);
                    const iconSpan = favoritoBtn.querySelector('.material-symbols-outlined');
                    if (iconSpan) { iconSpan.textContent = data.esFavorito ? 'favorite' : 'favorite_border'; }
                } else { alert('Error del servidor: ' + (data.message || 'Desconocido')); }
            })
            .catch(error => { alert('Error de conexión al intentar cambiar favorito.'); });
        } else {
            mostrarModal();
        }
    }
    if (favoritoBtn) {
        favoritoBtn.addEventListener('click', manejarClicFavoritoDetalle);
        const iconSpan = favoritoBtn.querySelector('.material-symbols-outlined');
        const esFavoritoInicial = favoritoBtn.classList.contains('activo');
        if (iconSpan) { iconSpan.textContent = esFavoritoInicial ? 'favorite' : 'favorite_border'; }
     }

    if (formComentario && estaAutenticadoServer) {
        formComentario.addEventListener('submit', async function(event) {
             event.preventDefault();
             const noticiaId = this.querySelector('input[name="NoticiaId"]').value;
             const texto = textoComentarioInput.value.trim();
             const token = this.querySelector('input[name="__RequestVerificationToken"]').value;
             if (!texto || texto.length < 3 || texto.length > 500) { alert('El comentario debe tener entre 3 y 500 caracteres.'); return; }
             const submitButton = this.querySelector('button[type="submit"]');
             if(submitButton) submitButton.disabled = true;
             try {
                 const response = await fetch('/Noticias/AgregarComentario', {
                     method: 'POST',
                     headers: { 'Content-Type': 'application/x-www-form-urlencoded', 'RequestVerificationToken': token },
                     body: `noticiaId=${encodeURIComponent(noticiaId)}&textoComentario=${encodeURIComponent(texto)}`
                 });
                 if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                 const contentType = response.headers.get("content-type");
                 if (contentType && contentType.includes("application/json")) {
                     const data = await response.json();
                     if (data.success) {
                         textoComentarioInput.value = '';
                         const nuevoComentarioDiv = document.createElement('div');
                         nuevoComentarioDiv.className = 'comentario';
                         nuevoComentarioDiv.style.opacity = 0; nuevoComentarioDiv.style.transition = 'opacity 0.5s ease';

                        nuevoComentarioDiv.dataset.comentarioId = data.id;
                         const comentarioHeaderDiv = document.createElement('div'); comentarioHeaderDiv.className = 'comentario-header';
                         const autorP = document.createElement('p'); autorP.className = 'comentario-autor'; autorP.textContent = data.autor; comentarioHeaderDiv.appendChild(autorP);
                         const accionesDiv = document.createElement('div'); accionesDiv.className = 'comentario-acciones';
                         const editButton = document.createElement('button'); editButton.className = 'btn-accion-comentario btn-editar-comentario'; editButton.title = 'Editar comentario'; editButton.innerHTML = '<span class="material-symbols-outlined">edit</span>'; accionesDiv.appendChild(editButton);
                         const deleteButton = document.createElement('button'); deleteButton.className = 'btn-accion-comentario btn-eliminar-comentario'; deleteButton.title = 'Eliminar comentario'; deleteButton.innerHTML = '<span class="material-symbols-outlined">delete</span>'; accionesDiv.appendChild(deleteButton);
                         comentarioHeaderDiv.appendChild(accionesDiv); nuevoComentarioDiv.appendChild(comentarioHeaderDiv);

                         const textoP = document.createElement('p'); textoP.className = 'comentario-texto'; textoP.textContent = data.texto; nuevoComentarioDiv.appendChild(textoP);
                         const fechaP = document.createElement('p'); fechaP.className = 'comentario-fecha';
                         const fechaSpan = document.createElement('span');
                         
                         fechaSpan.dataset.utcdate = data.fechaISO; 
                         fechaSpan.textContent = "formateando..."; fechaP.appendChild(fechaSpan); nuevoComentarioDiv.appendChild(fechaP);

                         listaComentariosDiv.prepend(nuevoComentarioDiv);
                         formatDateElement(fechaSpan); 
                         requestAnimationFrame(() => { const el = listaComentariosDiv.firstChild; if(el) el.style.opacity = 1; });
                         if (sinComentariosMsg) sinComentariosMsg.style.display = 'none';
                     } else { alert('Error al comentar: ' + (data.message || 'Error desconocido')); }
                 } else { const errorText = await response.text(); console.error('Respuesta no JSON (AgregarComentario):', errorText); alert('Error servidor al comentar.'); }
             } catch (error) { console.error('Error al enviar comentario:', error); alert('Error conexión al comentar.'); }
             finally { if(submitButton) submitButton.disabled = false; }
         });
    }

    
    if (listaComentariosDiv) {
        listaComentariosDiv.addEventListener('click', async function(event) {
            
            
            const deleteButton = event.target.closest('.btn-eliminar-comentario');
            if (deleteButton) {
                event.preventDefault();
                const comentarioDiv = deleteButton.closest('.comentario');
                const comentarioId = comentarioDiv ? comentarioDiv.dataset.comentarioId : null;
                if (!comentarioId) { console.error('No se pudo encontrar ID del comentario (eliminar).'); return; }
                mostrarModalConfirmacionComentario(comentarioId);
            }

            
            const editButton = event.target.closest('.btn-editar-comentario');
            if (editButton) {
                event.preventDefault();
                const comentarioDiv = editButton.closest('.comentario');
                if (!comentarioDiv || comentarioDiv.classList.contains('modo-edicion')) {
                    return; 
                }

                const textoElement = comentarioDiv.querySelector('.comentario-texto');
                const textoOriginal = textoElement.textContent;

                
                comentarioDiv.classList.add('modo-edicion');

                
                const formEdicionHtml = `
                    <form class="form-editar-comentario" onsubmit="return false;">
                        <textarea class="textarea-editar-comentario" required minlength="3" maxlength="500">${textoOriginal}</textarea>
                        <div class="botones-editar">
                            <button type="button" class="btn-cancelar-edicion">Cancelar</button>
                            <button type="submit" class="btn-guardar-edicion">Guardar</button>
                        </div>
                    </form>
                `;
                
                textoElement.insertAdjacentHTML('afterend', formEdicionHtml);
            }

           
            const cancelButton = event.target.closest('.btn-cancelar-edicion');
            if (cancelButton) {
                event.preventDefault();
                const comentarioDiv = cancelButton.closest('.comentario');
                const formEdicion = comentarioDiv.querySelector('.form-editar-comentario');
                if (formEdicion) formEdicion.remove(); 
                comentarioDiv.classList.remove('modo-edicion'); 
            }

            
            const saveButton = event.target.closest('.btn-guardar-edicion');
            if (saveButton) {
                event.preventDefault(); 
                const comentarioDiv = saveButton.closest('.comentario');
                const comentarioId = comentarioDiv.dataset.comentarioId;
                const formEdicion = saveButton.closest('.form-editar-comentario');
                const textarea = formEdicion.querySelector('.textarea-editar-comentario');
                const nuevoTexto = textarea.value.trim();
                const tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');

                if (!tokenInput) { alert('Error seguridad. Recarga.'); return; }
                if (!nuevoTexto || nuevoTexto.length < 3 || nuevoTexto.length > 500) { alert('El comentario debe tener entre 3 y 500 caracteres.'); return; }

                const token = tokenInput.value;
                saveButton.disabled = true; 

                try {
                    const response = await fetch('/Noticias/EditarComentario', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/x-www-form-urlencoded', 'RequestVerificationToken': token },
                        body: `comentarioId=${encodeURIComponent(comentarioId)}&nuevoTexto=${encodeURIComponent(nuevoTexto)}`
                    });

                    if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                    const contentType = response.headers.get("content-type");
                    if (contentType && contentType.includes("application/json")) {
                         const data = await response.json();
                         if (data.success) {
                            
                            const textoElement = comentarioDiv.querySelector('.comentario-texto');
                            textoElement.textContent = data.texto; // Actualiza el texto
                            const fechaSpan = comentarioDiv.querySelector('.comentario-fecha span[data-utcdate]');
                            if (fechaSpan) {
                                
                                fechaSpan.dataset.utcdate = data.fechaISO; 
                                
                                formatDateElement(fechaSpan);
                            }
                            formEdicion.remove(); 
                            comentarioDiv.classList.remove('modo-edicion'); 
                         } else {
                            alert('Error al editar: ' + (data.message || 'Error desconocido'));
                            saveButton.disabled = false; 
                         }
                    } else { const errorText = await response.text(); console.error('Respuesta no JSON (EditarComentario):', errorText); alert('Error servidor al editar.'); saveButton.disabled = false; }
                } catch (error) {
                    console.error('Error al editar comentario:', error);
                    alert('Error conexión al intentar editar.');
                    saveButton.disabled = false;
                }
            }

        }); 
    } 

    
    if (btnConfirmarEliminarComentario) {
        if (!btnConfirmarEliminarComentario.dataset.listenerAdded) {
             btnConfirmarEliminarComentario.addEventListener('click', async function() {
                 if (!comentarioIdParaEliminar) return;
                 btnConfirmarEliminarComentario.disabled = true;
                 const comentarioId = comentarioIdParaEliminar;
                 const comentarioDiv = listaComentariosDiv.querySelector(`.comentario[data-comentario-id="${comentarioId}"]`);
                 const tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
                 if (!tokenInput) { alert('Error seguridad. Recarga.'); btnConfirmarEliminarComentario.disabled = false; return; }
                 const token = tokenInput.value;
                 try {
                     const response = await fetch('/Noticias/EliminarComentario', {
                         method: 'POST',
                         headers: { 'Content-Type': 'application/x-www-form-urlencoded', 'RequestVerificationToken': token },
                         body: `comentarioId=${encodeURIComponent(comentarioId)}`
                     });
                     ocultarModalConfirmacionComentario();
                     if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                     const contentType = response.headers.get("content-type");
                     if (contentType && contentType.includes("application/json")) {
                         const data = await response.json();
                         if (data.success) {
                             if (comentarioDiv) {
                                 comentarioDiv.style.transition = 'opacity 0.5s ease, transform 0.5s ease';
                                 comentarioDiv.style.opacity = '0';
                                 comentarioDiv.style.transform = 'translateX(-50px)';
                                 setTimeout(() => {
                                     comentarioDiv.remove();
                                     if (!listaComentariosDiv.querySelector('.comentario')) {
                                          if(sinComentariosMsg) sinComentariosMsg.style.display = 'block';
                                     }
                                 }, 500);
                             }
                         } else { alert('Error al eliminar: ' + (data.message || 'Error desconocido')); }
                     } else { const errorText = await response.text(); console.error('Respuesta no JSON (EliminarComentario):', errorText); alert('Error servidor al eliminar.'); }
                 } catch (error) {
                    ocultarModalConfirmacionComentario();
                    console.error('Error al eliminar comentario:', error);
                    alert('Error conexión al intentar eliminar.');
                 }
             });
             btnConfirmarEliminarComentario.dataset.listenerAdded = 'true';
        }
    }

     
     if (comentarBtnSubmit && !estaAutenticadoServer) {
         comentarBtnSubmit.addEventListener('click', function(e){ e.preventDefault(); mostrarModal(); });
     }

    
    document.querySelectorAll('#lista-comentarios .comentario-fecha span[data-utcdate]').forEach(formatDateElement);

}); 
</script>