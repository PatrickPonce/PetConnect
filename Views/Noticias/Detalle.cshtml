@model PetConnect.Models.Noticia

<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,400,0,0" />

<style>

    body {
        background-color: #FFFDEC;
        font-family: 'Arial', sans-serif;
        margin: 0;
        padding: 0;
    }

    /* Contenedor principal para la noticia */
    .noticia-wrapper {
        display: flex;
        justify-content: center;
        align-items: flex-start;
        padding: 2rem;
        gap: 3rem;
        background-color: #748675;
        border-bottom: 2px solid #ddd;
    }

    /* Contenedor para la información de la noticia (CORREGIDO) */
    .noticia-info {
        flex: 1; 
        max-width: 500px;
        display: flex;
        flex-direction: column;
        justify-content: center; 
        position: relative;
        padding-right: 70px; 
    }

    
    .breadcrumbs {
        margin-bottom: 1.5rem; 
        font-size: 0.9rem;
    }

   
    .noticia-titulo {
        font-size: 3rem;
        font-weight: 700;
        color: #FFFDEC; 
        line-height: 1.2;
        margin-bottom: 1rem; 
    }

    .noticia-fecha {
        font-size: 1rem;
        color: #FFFDEC; 
        margin-top: 0; 
    }

    .favorito-btn {
        position: absolute; 
        top: 0;
        right: 0;
        background-color: #fce4e4;
        border: none;
        border-radius: 50%;
        width: 50px;
        height: 50px;
        display: flex;
        justify-content: center;
        align-items: center;
        cursor: pointer;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        transition: transform 0.2s, background-color 0.2s;
    }

    .favorito-btn:hover {
        background-color: #fce4e4;
        transform: scale(1.1);
    }

    .noticia-info .favorito-btn.activo > .material-symbols-outlined {
    color: #e58f8f !important; 
    transform: scale(1.1);
    }

    .noticia-info .favorito-btn > .material-symbols-outlined {
    font-size: 28px;
    color: white; 
    font-variation-settings: 'FILL' 0;
    transition: all 0.2s ease;
    }

    .favorito-btn.activo {
    background-color: #ebadad; 
    }
    .noticia-imagen-container {
        flex: 1.5;
        max-width: 600px;
    }

    .noticia-imagen {
        width: 100%;
        height: auto;
        object-fit: cover;
        border-radius: 12px;
    }

    .contenido-principal {
        max-width: 900px;
        margin: 2rem auto;
        padding: 2rem;
        background-color: #FFFDEC;
        border-radius: 12px;
    }

    .noticia-parrafo p {
        font-size: 1.1rem;
        line-height: 1.8;
        color: #444;
    }

    .comentarios-container {
        margin-top: 3rem;
        padding: 2rem;
        background-color: #fff6f6;
        border-radius: 12px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.05);
    }

    .comentario {
        background-color: #fefefe;
        border-left: 4px solid #72626e;
        border-radius: 8px;
        padding: 1.2rem;
        margin-bottom: 1.5rem;
    }
    .comentario-autor {
        font-weight: bold;
        color: #555;
        margin-bottom: 0.3rem;
    }
    .comentario-texto {
        color: #333;
        line-height: 1.6;
    }
    .comentario-fecha {
        font-size: 0.8rem;
        color: #aaa;
        text-align: right;
        margin-top: 0.5rem;
    }
    .form-comentario {
        margin-top: 2rem;
    }
    .form-comentario label {
        font-weight: bold;
        color: #72626e;
        display: block;
        margin-bottom: 0.5rem;
    }
    .form-comentario textarea {
        width: 100%;
        height: 120px;
        padding: 0.75rem;
        border-radius: 8px;
        border: 1px solid #ccc;
        resize: vertical;
        font-size: 1rem;
    }
    .form-comentario button {
        margin-top: 1rem;
        padding: 0.75rem 1.5rem;
        background-color: #72626e;
        color: white;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        transition: background-color 0.3s ease, transform 0.2s ease;
    }
    .form-comentario button:hover {
        background-color: #5a4b56;
        transform: translateY(-2px);
    }
    ul {
        list-style-type: disc;
        margin: 1.5rem 0;
        padding-left: 2.5rem;
    }

    ul li {
        font-size: 1.1rem;
        line-height: 1.8;
        color: #444;
        margin-bottom: 0.5rem;
    }

    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.7);
        display: none; 
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .modal-content {
        background-color: #fff6f6;
        padding: 2.5rem; 
        border-radius: 12px;
        box-shadow: 0 8px 30px rgba(0, 0, 0, 0.3); 
        text-align: center;
        position: relative;
        max-width: 450px;
        width: 90%;
    }

    .close-button {
        position: absolute;
        top: 15px;
        right: 20px;
        font-size: 1.8rem; 
        font-weight: normal;
        cursor: pointer;
        color: #aaa;
        transition: color 0.2s;
    }

    .close-button:hover {
        color: #5a4b56;
    }

    .modal-body h3 {
        color: #d67a7a; 
        font-size: 1.5rem;
        margin-bottom: 1.5rem;
    }

    .modal-body p {
        font-size: 1.1rem;
        margin-bottom: 2rem;
        color: #5a4b56;
    }

    .login-button-group {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 15px;
        width: 100%;
        max-width: 350px;
        margin: 0 auto;
        }

    .login-button, 
    .register-link {
        flex: 1;                     
        display: flex;               
        justify-content: center;
        align-items: center;
        height: 50px;                 
        border-radius: 8px;
        font-weight: bold;
        text-decoration: none;
        border: 2px solid #72626e;
        box-sizing: border-box;
        transition: all 0.3s ease;
        font-size: 1rem;
        cursor: pointer;
    }

    /* Botón Iniciar Sesión */
    .login-button {
        background-color: #72626e;
        color: white;
    }

    /* Botón Registrarse */
    .register-link {
        background-color: transparent;
        color: #72626e;
    }

    /* Hover */
    .login-button:hover {
        background-color: #5a4b56;
        border-color: #5a4b56;
        transform: translateY(-2px);
    }

    .register-link:hover {
        background-color: #72626e;
        color: white;
        transform: translateY(-2px);
    }
    .breadcrumbs a {
    text-decoration: none; 
    }
    
</style>

<div class="noticia-wrapper">
    <div class="noticia-info">
        <div class="breadcrumbs">
            <a href="@Url.Action("Index", "Home")" style="color: #FFFDEC;">Inicio</a> 
            <span style="color: #FFFDEC;">»</span> 
            <a href="@Url.Action("Index", "Noticias")" style="color: #FFFDEC;">Noticias</a>
            <span style="color: #FFFDEC;">»</span>
            <span style="font-weight: bold; color: #d67a7a;">@Model.Titulo</span>
        </div>
        
        <button id="favorito-btn" class="favorito-btn @(ViewBag.EsFavorito ? "activo" : "")" title="Guardar en favoritos" data-id="@Model.Id">
            <span class="material-symbols-outlined">
                @(ViewBag.EsFavorito ? "favorite" : "favorite_border")
            </span>
        </button>

        <h1 class="noticia-titulo">@Model.Titulo</h1>
        <p class="noticia-fecha">@Model.FechaPublicacion.ToShortDateString()</p>
    </div>
    <div class="noticia-imagen-container">
        <img src="@Model.UrlImagen" alt="@Model.Titulo" class="noticia-imagen" />
    </div>
</div>

<div class="contenido-principal">
    @Html.AntiForgeryToken()
    <article class="noticia-parrafo">
        @Html.Raw(Model.Contenido)
    </article>

    <section class="comentarios-container">
        <h3>Comentarios</h3>
        
        @if (Model.Comentarios != null && Model.Comentarios.Any())
        {
            foreach (var comentario in Model.Comentarios)
            {
                <div class="comentario">
                    <p class="comentario-autor">@comentario.Autor</p>
                    <p class="comentario-texto">@comentario.Texto</p>
                    <p class="comentario-fecha">@comentario.FechaComentario.ToString("g")</p>
                </div>
            }
        }
        else
        {
            <p>No hay comentarios todavía. ¡Sé el primero en comentar!</p>
        }
        
        <div class="form-comentario">
            <label for="texto">Deja un comentario</label>
            <textarea id="texto" name="Texto" required></textarea>
            <button id="comentar-btn" type="button">Comentar</button>
        </div>
    </section>
</div>

<div id="login-modal" class="modal-overlay">
    <div class="modal-content">
        <span class="close-button">&times;</span>
        <div class="modal-body">
            <h3>Acceso Requerido</h3>
            <p>¡Hola! Debes iniciar sesión o registrarte para comentar y guardar esta noticia en favoritos.</p>
            <div class="login-button-group">
                <a href="/Identity/Account/Login" class="login-button">Iniciar Sesión</a>
                <a href="/Identity/Account/Register" class="register-link">Registrarse</a>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        
        const comentarBtn = document.getElementById('comentar-btn');
        const loginModal = document.getElementById('login-modal');
        const closeButton = loginModal ? loginModal.querySelector('.close-button') : null;
        function mostrarModal() { if (loginModal) loginModal.style.display = 'flex'; }
        function ocultarModal() { if (loginModal) loginModal.style.display = 'none'; }
        if (closeButton) closeButton.addEventListener('click', ocultarModal);
        window.addEventListener('click', (event) => { if (event.target === loginModal) ocultarModal(); });

    
        const favoritoBtn = document.getElementById('favorito-btn');
        
        const estaAutenticadoServer = '@User.Identity.IsAuthenticated.ToString().ToLower()' === 'true'; 
        console.log('DEBUG Vista Detalle - Autenticado (Renderizado):', estaAutenticadoServer); 

        function manejarClicFavoritoDetalle() {
            console.log('DEBUG Vista Detalle - Click - Autenticado:', estaAutenticadoServer); 

            if (estaAutenticadoServer) { 
                const noticiaId = favoritoBtn.dataset.id;
                const tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
                if (!tokenInput) {
                    console.error('No se encontró AntiForgeryToken.');
                    alert('Error seguridad. Recarga.');
                    return;
                }
                const token = tokenInput.value;

                fetch('/Noticias/ToggleFavorito', { 
                    method: 'POST', 
                    headers: {      
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token
                    },
                    body: JSON.stringify(parseInt(noticiaId))
                })
            
                .then(response => { 
                
                    if (!response.ok) { 
                        
                        throw new Error(`HTTP error! status: ${response.status}`); 
                    }
                
                    return response.json(); 
                })
                .then(data => {
                    console.log('Respuesta del servidor (ToggleFavorito):', data);
                    if (data.success) {
                        favoritoBtn.classList.toggle('activo', data.esFavorito);
                        const iconSpan = favoritoBtn.querySelector('.material-symbols-outlined');
                        if (iconSpan) {
                            iconSpan.textContent = data.esFavorito ? 'favorite' : 'favorite_border';
                        }
                    } else { 
                        console.error('Error del servidor al cambiar favorito:', data.message);
                        alert('Error del servidor: ' + (data.message || 'Desconocido')); 
                    }
                })
                .catch(error => { 
                    console.error('Error en fetch o al procesar respuesta:', error);
                    alert('Error de conexión o del servidor al intentar cambiar favorito.'); 
                });
            } else {
                mostrarModal();
            }
        }

        if (favoritoBtn) {
            favoritoBtn.addEventListener('click', manejarClicFavoritoDetalle);
        }

        if (comentarBtn) {
            comentarBtn.addEventListener('click', function() {
                if (!estaAutenticadoServer) {
                    mostrarModal();
                }
            });
        }

        if (favoritoBtn) { 
            const iconSpan = favoritoBtn.querySelector('.material-symbols-outlined');
            const esFavoritoInicial = favoritoBtn.classList.contains('activo'); 
            if (iconSpan) {
                iconSpan.textContent = esFavoritoInicial ? 'favorite' : 'favorite_border';
            }
        }
    });
</script>