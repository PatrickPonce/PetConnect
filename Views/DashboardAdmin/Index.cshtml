@model PetConnect.ViewModels.DashboardViewModel
@{
    ViewData["Title"] = "Dashboard Admin";
    Layout = "~/Views/Shared/_AdminLayout.cshtml"; // Layout de Admin
}

<style>
    body { background-color: #fdfaf1; font-family: 'Poppins', sans-serif; }
    .dashboard-container { padding: 2rem; }
    .dashboard-title { text-align: center; font-size: 2.5rem; font-weight: bold; color: #ff8fab; margin-bottom: 3rem; }
    .chart-section { display: grid; grid-template-columns: repeat(auto-fit, minmax(400px, 1fr)); gap: 2.5rem; margin-bottom: 3rem; }
    .chart-card { background-color: white; padding: 1.5rem 2rem; border-radius: 15px; box-shadow: 0 5px 15px rgba(0,0,0,0.07); }
    .chart-card h2 { font-size: 1.5rem; font-weight: 600; color: #555; margin-bottom: 1.5rem; text-align: center; }
    /* Ajuste para que los gráficos no sean gigantes */
    .chart-container { position: relative; height: 350px; width: 100%; }

     /* Estilos para los botones de paginación (simulados) */
    .pagination-controls { display: flex; justify-content: space-between; margin-top: 2rem; }
    .btn-pagination { background-color: #6c757d; color: white; padding: 10px 25px; border: none; border-radius: 8px; font-weight: 600; cursor: pointer; text-decoration: none; }
    .btn-pagination:hover { background-color: #5a6268; }
    .btn-pagination.disabled { background-color: #b0b0b0; cursor: not-allowed; } /* Estilo para botón deshabilitado */


</style>

<div class="dashboard-container">
    <h1 class="dashboard-title">Dashboard Principal</h1>

    <div class="chart-section">
        <div class="chart-card">
            <h2>Gestión de Directorio de Servicios</h2>
            <div class="chart-container">
                <canvas id="serviciosChart"></canvas>
            </div>
        </div>
        <div class="chart-card">
            <h2>Usuarios Registrados (Ejemplo)</h2>
             <div class="chart-container">
                <canvas id="usuariosChart"></canvas>
            </div>
        </div>
    </div>

    <div class="chart-section" style="grid-template-columns: 1fr;"> <div class="chart-card">
            <h2>Noticias Publicadas por Año</h2>
             <div class="chart-container">
                <canvas id="noticiasChart"></canvas>
             </div>
        </div>
     </div>

     <div class="pagination-controls">
         <a href="#" class="btn-pagination disabled">Anterior página</a> <a href="#" class="btn-pagination">Siguiente página</a>
     </div>

</div>

@section Scripts {
<script>
    document.addEventListener('DOMContentLoaded', function() {

        // --- Gráfico 1: Servicios (Pie Chart) ---
        const ctxServicios = document.getElementById('serviciosChart').getContext('2d');
        const serviciosData = {
            labels: @Html.Raw(Json.Serialize(Model.ConteoServiciosPorTipo.Keys)),
            datasets: [{
                label: 'Cantidad',
                data: @Html.Raw(Json.Serialize(Model.ConteoServiciosPorTipo.Values)),
                backgroundColor: [ // Colores como en tu imagen
                    '#4A90E2', // Azul (Veterinarias)
                    '#F5A623', // Naranja (Guardería)
                    '#7ED321', // Verde (Pet Friendly)
                    '#E88989', // Rosa (Adopción) - Color de tu botón primario
                    '#50E3C2'  // Turquesa (Pet Shop)
                ],
                hoverOffset: 4
            }]
        };
        new Chart(ctxServicios, {
            type: 'doughnut', // 'pie' o 'doughnut' (dona)
            data: serviciosData,
            options: {
                responsive: true,
                maintainAspectRatio: false, // Permite que se ajuste al contenedor
                plugins: {
                    legend: { position: 'bottom' } // Leyenda abajo
                }
            }
        });

        // --- Gráfico 2: Usuarios (Line Chart - Ejemplo) ---
         const ctxUsuarios = document.getElementById('usuariosChart').getContext('2d');
         const usuariosData = {
            labels: @Html.Raw(Json.Serialize(Model.EtiquetasTiempoUsuarios)),
            datasets: [{
                label: 'Usuarios Nuevos',
                data: @Html.Raw(Json.Serialize(Model.DatosConteoUsuarios)),
                fill: false,
                borderColor: '#F5A623', // Naranja
                tension: 0.1
            }]
         };
         new Chart(ctxUsuarios, {
            type: 'line',
            data: usuariosData,
             options: { responsive: true, maintainAspectRatio: false }
         });

        // --- Gráfico 3: Noticias (Line Chart) ---
        const ctxNoticias = document.getElementById('noticiasChart').getContext('2d');
         const noticiasData = {
            labels: @Html.Raw(Json.Serialize(Model.EtiquetasTiempoNoticias)),
            datasets: [{
                label: 'Noticias Publicadas',
                data: @Html.Raw(Json.Serialize(Model.DatosConteoNoticias)),
                fill: false,
                borderColor: '#50E3C2', // Turquesa
                tension: 0.1
            }]
         };
         new Chart(ctxNoticias, {
            type: 'line',
            data: noticiasData,
             options: { responsive: true, maintainAspectRatio: false }
         });

    });
</script>
}