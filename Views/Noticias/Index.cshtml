@model IEnumerable<PetConnect.Models.Noticia>
@using Microsoft.AspNetCore.Identity
@using System.Text.RegularExpressions
@using System.Collections.Generic 
@inject SignInManager<IdentityUser> SignInManager

@{
    
    var favoritosDelUsuario = ViewData["FavoritosDelUsuario"] as HashSet<int> ?? new HashSet<int>();
    bool estaLogueado = SignInManager.IsSignedIn(User);
}

<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,400,0,0" />

<style>
    
    body {
        background-color: #f7f3e8; 
        font-family: 'Arial', sans-serif;
    }

    .news-list-container {
        padding: 2rem 1rem;
        text-align: center;
    }

    .news-list-container h2 {
        font-size: 2.5rem;
        font-weight: bold;
        color: #FFCFCF;
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.1);
    }

    .news-cards-wrapper {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        gap: 2rem;
        margin-top: 2rem;
    }

    .noticia-card {
        position: relative;
        background-color: #FFE2E2;
        border-radius: 12px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        overflow: hidden;
        width: 300px;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        display: flex; 
        flex-direction: column; 
        min-height: 480px; 
        box-sizing: border-box; 
    }

    .noticia-card:hover {
        transform: translateY(-8px);
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
    }

    .noticia-imagen {
        width: 100%;
        height: 200px;
        object-fit: cover;
    }

   .favorito-btn {
    position: absolute;
    top: 15px;
    right: 15px;
    background-color: #ffffff; 
    border: 1px solid #e0e0e0; 
    border-radius: 50%;
    width: 45px;
    height: 45px;
    display: flex;
    justify-content: center;
    align-items: center;
    cursor: pointer;
    transition: transform 0.2s ease, box-shadow 0.2s ease, background-color 0.2s ease;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    .favorito-btn:hover {
        transform: scale(1.1);
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
    }

    .favorito-btn .material-symbols-outlined {
        color: #D3B8C2; 
        font-size: 1.4rem;
        transition: all 0.3s ease; 
    }

    
    .favorito-btn.activo .material-symbols-outlined {
        color: #f39797 !important; 
        font-size: 1.6rem; 
        transform: scale(1.2); 
        filter: drop-shadow(0 0 3px rgba(232, 55, 55, 0.4));
    }

    .favorito-btn:not(.activo):hover .material-symbols-outlined {
        color: #E68FAC; 
    }
    
    
    .noticia-contenido {
        padding: 1.5rem;
        text-align: left;
        display: flex;
        flex-direction: column;
        flex-grow: 1;
        justify-content: space-between;
    }

    .noticia-titulo {
        font-size: 1.4rem;
        font-weight: 600;
        color: #333;
        margin-bottom: 0.5rem;
    }

    .noticia-fecha {
        font-size: 0.9rem;
        color: #666;
        margin-bottom: 1rem;
    }

    .noticia-resumen {
        font-size: 1rem;
        color: #555;
        line-height: 1.5;
        margin-bottom: 1.5rem;
        flex-grow: 1;
    }

    .btn-leer-mas {
        align-self: center; 
        padding: 0.6rem 3.5rem; 
        font-size: 1.1rem;      
        border-radius: 50px;    
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2); 
        
        background-color: #72626e;
        color: white;
        text-decoration: none;
        transition: background-color 0.3s ease, transform 0.2s ease, box-shadow 0.3s ease;
        margin-top: auto;
        line-height: 1.5;
        text-align: center;
    }

    .btn-leer-mas:hover {
        background-color: #5a4b56;
        transform: translateY(-3px); 
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.3); 
    }

    .modal-alerta {
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.7);
        display: none;
        justify-content: center;
        align-items: center;
    }

    .modal-alerta-contenido {
        background-color: #fefefe;
        padding: 2.5rem;
        border-radius: 12px;
        box-shadow: 0 8px 30px rgba(0, 0, 0, 0.3);
        text-align: center;
        position: relative;
        max-width: 450px;
        width: 90%;
        box-sizing: border-box;
    }

    .modal-alerta-cerrar {
        position: absolute;
        top: 15px;
        right: 20px;
        color: #aaa;
        font-size: 1.8rem;
        font-weight: bold;
        cursor: pointer;
        transition: color 0.2s;
    }

    .modal-alerta-cerrar:hover,
    .modal-alerta-cerrar:focus {
        color: #5a4b56;
        text-decoration: none;
    }

    .modal-alerta-contenido h3 {
        color: #d67a7a;
        font-size: 1.5rem;
        margin-bottom: 1.5rem;
    }

    .modal-alerta-contenido p {
        font-size: 1.1rem;
        margin-bottom: 2rem;
        color: #5a4b56;
        line-height: 1.6;
    }

    .login-button-group {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 15px;
        width: 100%;
        max-width: 350px;
        margin: 0 auto;
    }

    .login-button, 
    .register-link {
        flex: 1; 
        display: flex;           
        justify-content: center;
        align-items: center;
        height: 50px;
        border-radius: 8px;
        font-weight: bold;
        text-decoration: none;
        border: 2px solid #72626e;
        box-sizing: border-box;
        transition: all 0.3s ease;
        font-size: 1rem;
        cursor: pointer;
    }

    .login-button {
        background-color: #72626e;
        color: white;
    }

    .register-link {
        background-color: transparent;
        color: #72626e;
    }

    .login-button:hover {
        background-color: #5a4b56;
        border-color: #5a4b56;
        transform: translateY(-2px);
    }

    .register-link:hover {
        background-color: #72626e;
        color: white;
        transform: translateY(-2px);
    }
</style>

<div class="news-list-container">
    @Html.AntiForgeryToken()
    <h2>Noticias destacadas</h2>
    <div class="news-cards-wrapper">
        @foreach (var noticia in Model)
        {
           
            bool esFavorito = favoritosDelUsuario.Contains(noticia.Id);

            <div class="noticia-card">
                <img src="@noticia.UrlImagen" alt="@noticia.Titulo" class="noticia-imagen" />
                
                <div class="favorito-btn @(esFavorito ? "activo" : "")" data-id="@noticia.Id">
                    <span class="material-symbols-outlined">
                        @(esFavorito ? "favorite" : "favorite_border")
                    </span>
                </div>
                <div class="noticia-contenido">
                    <h3 class="noticia-titulo">@noticia.Titulo</h3>
                    <p class="noticia-fecha">@noticia.FechaPublicacion.ToString("dd/MM/yyyy")</p>
                    
                    @{
                        string contenidoLimpio = Regex.Replace(noticia.Contenido, "<.*?>", string.Empty);
                        string resumen;

                        if (contenidoLimpio.Length > 100)
                        {
                            resumen = contenidoLimpio.Substring(0, 100) + "...";
                        }
                        else
                        {
                            resumen = contenidoLimpio;
                        }
                    }
                    <p class="noticia-resumen">@resumen</p>
                    
                    <a href="@Url.Action("Detalle", "Noticias", new { id = noticia.Id })" class="btn-leer-mas">Leer más...</a>
                </div>
            </div>
        }
    </div>
</div>

<div id="modal-alerta" class="modal-alerta">
    <div class="modal-alerta-contenido">
        <span class="modal-alerta-cerrar">&times;</span>
        <h3>Acceso Requerido</h3>
        <p>¡Hola! Debes iniciar sesión o registrarte para comentar y guardar esta noticia en favoritos.</p>
        <div class="login-button-group">
            <a href="/Identity/Account/Login" class="login-button">Iniciar Sesión</a>
            <a href="/Identity/Account/Register" class="register-link">Registrarse</a>
        </div>
    </div>
</div>

@section Scripts {
<script>
    document.addEventListener('DOMContentLoaded', function() {
        
        // Convertimos la variable de Razor a una variable de JS
        const estaLogueado = @estaLogueado.ToString().ToLower();

        // Obtenemos los elementos del DOM
        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
        const favoriteButtons = document.querySelectorAll('.favorito-btn');
        const loginModal = document.getElementById('login-alerta-modal');
        const closeModalBtn = document.getElementById('modal-alerta-cerrar-btn');

        // --- Lógica para el Modal ---

        function mostrarLoginModal() {
            if (loginModal) loginModal.style.display = 'flex';
        }

        function ocultarLoginModal() {
            if (loginModal) loginModal.style.display = 'none';
        }

        // Cierra el modal al hacer clic en la 'x'
        if (closeModalBtn) {
            closeModalBtn.addEventListener('click', ocultarLoginModal);
        }

        // Cierra el modal al hacer clic fuera de él
        window.addEventListener('click', function(event) {
            if (event.target == loginModal) {
                ocultarLoginModal();
            }
        });

        // --- Lógica para los Botones de Favorito ---

        favoriteButtons.forEach(btn => {
            btn.addEventListener('click', async function() {
                
                // 1. Si no está logueado, muestra el modal y detiene la ejecución
                if (!estaLogueado) {
                    mostrarLoginModal();
                    return;
                }

                // 2. Si está logueado, continúa
                const button = this;
                const noticiaId = parseInt(button.dataset.id);
                const icon = button.querySelector('.material-symbols-outlined');

                // Deshabilita el botón temporalmente para evitar doble clic
                button.disabled = true;

                try {
                    // 3. Llama al endpoint 'ToggleFavorito' que creamos
                    const response = await fetch('/Noticias/ToggleFavorito', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': token
                        },
                        // Enviamos el JSON en el formato correcto
                        body: JSON.stringify({ noticiaId: noticiaId }) 
                    });

                    if (!response.ok) {
                        throw new Error('Error en la respuesta del servidor');
                    }

                    const data = await response.json();

                    // 4. Actualiza la UI (el corazón) dinámicamente
                    if (data.success) {
                        if (data.esFavorito) {
                            // Añadido a favoritos
                            button.classList.add('activo');
                            icon.textContent = 'favorite'; // Ícono lleno
                        } else {
                            // Quitado de favoritos
                            button.classList.remove('activo');
                            icon.textContent = 'favorite_border'; // Ícono borde
                        }
                    } else {
                        alert(data.message || 'Error al procesar la solicitud.');
                    }

                } catch (error) {
                    console.error('Error en fetch:', error);
                    alert('Error de conexión. Inténtalo de nuevo.');
                } finally {
                    // Vuelve a habilitar el botón
                    button.disabled = false;
                }
            });
        });

    });
</script>
}