@model PetConnect.ViewModels.FavoritosViewModel
@using Microsoft.AspNetCore.Identity
@using System.Text.RegularExpressions
@inject SignInManager<IdentityUser> SignInManager

@{
    ViewData["Title"] = "Mis Favoritos";
}

<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,400,0,0" />

<style>
    /* Estilos de la página y tarjetas (combinados) */
    body { background-color: #FFF6F6; }
    .page-container { padding: 2rem 1rem; max-width: 1200px; margin: auto; }
    .page-title { text-align: center; font-size: 2.8rem; font-weight: bold; color: #ff8fab; text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.05); margin-bottom: 2.5rem; }

    /* Barra de Búsqueda */
    .search-bar-container { display: flex; justify-content: center; margin-bottom: 3.5rem; }
    .search-form { display: flex; width: 100%; max-width: 600px; background-color: white; border-radius: 50px; padding: 8px; box-shadow: 0 4px 15px rgba(0, 0, 0, 0.08); }
    .search-input { flex-grow: 1; padding: 0.5rem 1rem; border: none; outline: none; background: transparent; font-size: 1rem; }
    .search-button { padding: 0.6rem 1.8rem; border: none; background-color: #ff8fab; color: white; border-radius: 50px; cursor: pointer; font-weight: bold; transition: background-color 0.3s; }
    .search-button:hover { background-color: #f87aa0; }
    
    /* Secciones y Tarjetas */
    .service-section h2 { font-size: 1.8rem; color: #333; border-bottom: 2px solid #ffc2d1; padding-bottom: 0.5rem; margin-top: 2rem; margin-bottom: 2rem; }
    .favorites-grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); gap: 2rem; }
    .item-card { position: relative; background-color: #fff; border-radius: 12px; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08); overflow: hidden; transition: transform 0.2s; }
    .item-card:hover { transform: translateY(-5px); }
    .item-imagen { width: 100%; height: 220px; object-fit: cover; }
    .item-contenido { padding: 1.5rem; text-align: left; }
    .item-nombre { font-size: 1.5rem; font-weight: 600; color: #333; margin-bottom: 0.5rem; /* Añadido margen */ }
    .item-ubicacion { /* Estilo para ubicación si quieres */ color: #666; margin-bottom: 1rem; }
    .btn-ver-mas { display: block; margin-top: auto; /* Empuja al final */ padding: 0.75rem; background-color: #d67a7a; color: white; text-align: center; text-decoration: none; border-radius: 8px; }

    /* Botón corazón individual */
    .remove-favorito-btn { position: absolute; top: 15px; right: 15px; background-color: rgba(255, 255, 255, 0.8); backdrop-filter: blur(5px); border-radius: 50%; width: 45px; height: 45px; display: flex; justify-content: center; align-items: center; cursor: pointer; border: none; box-shadow: 0 2px 5px rgba(0,0,0,0.1); z-index: 10; /* Asegura que esté encima */}
    .remove-favorito-btn .material-symbols-outlined { color: #e25e83; font-variation-settings: 'FILL' 1; }
    
    /* Contenedor Vacío */
    .empty-favorites-container { text-align: center; padding: 4rem 1rem; }
    .empty-favorites-container h2 { font-size: 1.8rem; color: #555; margin-bottom: 1rem; }
    .empty-favorites-container p { font-size: 1.2rem; color: #777; margin-bottom: 2rem; }
    .empty-favorites-container .explore-button { display: inline-block; padding: 1rem 2.5rem; background-color: #ff8fab; color: white; text-decoration: none; font-weight: bold; border-radius: 50px; transition: background-color 0.3s; }
    .empty-favorites-container .explore-button:hover { background-color: #f87aa0; }

    /* Estilos del Modal (Reutilizados) */
    .modal-confirmacion-eliminar { display: none; position: fixed; z-index: 1001; left: 0; top: 0; width: 100%; height: 100%; overflow: auto; background-color: rgba(0,0,0,0.6); justify-content: center; align-items: center; }
    .modal-contenido { background-color: #fefefe; margin: auto; padding: 30px; border-radius: 12px; box-shadow: 0 10px 30px rgba(0,0,0,0.3); max-width: 450px; width: 90%; text-align: center; position: relative; animation: fadeIn 0.3s ease-out; }
    .modal-cerrar-eliminar { color: #aaa; position: absolute; top: 15px; right: 25px; font-size: 28px; font-weight: bold; cursor: pointer; transition: color 0.2s; }
    .modal-cerrar-eliminar:hover, .modal-cerrar-eliminar:focus { color: #8B8B8B; text-decoration: none; }
    .modal-titulo-eliminar { color: #d67a7a; font-size: 1.8rem; margin-bottom: 20px; }
    .modal-mensaje-eliminar { font-size: 1.1rem; margin-bottom: 30px; color: #555; line-height: 1.5; }
    .modal-botones-eliminar { display: flex; justify-content: center; gap: 15px; }
    .btn-modal-accion { padding: 12px 25px; border-radius: 8px; font-size: 1rem; font-weight: bold; cursor: pointer; transition: all 0.2s ease; border: 2px solid transparent; }
    .btn-modal-confirmar { background-color: #d67a7a; color: white; }
    .btn-modal-confirmar:hover { background-color: #c06969; transform: translateY(-2px); box-shadow: 0 4px 10px rgba(0,0,0,0.1); }
    .btn-modal-cancelar { background-color: #f0f0f0; color: #555; border-color: #ddd; }
    .btn-modal-cancelar:hover { background-color: #e0e0e0; transform: translateY(-2px); box-shadow: 0 4px 10px rgba(0,0,0,0.1); }
    @@keyframes fadeIn { from { opacity: 0; transform: translateY(-20px); } to { opacity: 1; transform: translateY(0); } }

</style>

<div class="page-container">
    @Html.AntiForgeryToken() 

    @{
        var hasAnyFavorites = Model.LugaresFavoritos.Any() || Model.GuarderiasFavoritas.Any() || Model.NoticiasFavoritas.Any();
        var searchString = Context.Request.Query["searchString"]; 
    }

    <h1 class="page-title">Mis Favoritos</h1>

    @if (hasAnyFavorites || !string.IsNullOrEmpty(searchString))
    {
        <div class="search-bar-container">
            <form asp-action="Index" method="get" class="search-form">
                <input type="text" name="searchString" placeholder="Buscar en mis favoritos..." class="search-input" value="@searchString" />
                <button type="submit" class="search-button">Buscar</button>
            </form>
        </div>
    }

    @if (hasAnyFavorites)
    {
        @if (Model.NoticiasFavoritas.Any())
        {
            <section class="service-section">
                <h2>Noticias</h2>
                <div class="favorites-grid">
                    @foreach (var noticia in Model.NoticiasFavoritas)
                    {
                        <div class="item-card" id="favorito-noticia-@noticia.Id">
                             <button class="remove-favorito-btn" data-type="noticia" data-id="@noticia.Id" title="Quitar de favoritos">
                                 <span class="material-symbols-outlined">favorite</span>
                             </button>
                            
                            <img src="@noticia.UrlImagen" alt="Imagen de @noticia.Titulo" class="item-imagen" />
                            <div class="item-contenido">
                                <h3 class="item-nombre">@noticia.Titulo</h3>
                                @{
                                    string contenidoLimpio = Regex.Replace(noticia.Contenido ?? string.Empty, "<.*?>", String.Empty);
                                    string resumen = contenidoLimpio.Length > 100 ? contenidoLimpio.Substring(0, 100) + "..." : contenidoLimpio;
                                }
                                <p>@resumen</p>
                                <a asp-controller="Noticias" asp-action="Detalle" asp-route-id="@noticia.Id" class="btn-ver-mas">Ver más detalles</a>
                            </div>
                        </div>
                    }
                </div>
            </section>
        }

        @if (Model.LugaresFavoritos.Any())
        {
            <section class="service-section">
                <h2>Lugares Pet Friendly</h2>
                <div class="favorites-grid">
                    @foreach (var lugar in Model.LugaresFavoritos)
                    {
                        <div class="item-card" id="favorito-lugar-@lugar.Id">
                             <button class="remove-favorito-btn" data-type="lugar" data-id="@lugar.Id" title="Quitar de favoritos">
                                 <span class="material-symbols-outlined">favorite</span>
                             </button>
                            
                            <img src="@lugar.UrlImagenPrincipal" alt="Imagen de @lugar.Nombre" class="item-imagen" />
                            <div class="item-contenido">
                                <h3 class="item-nombre">@lugar.Nombre</h3>
                                <p class="item-ubicacion">@lugar.Ubicacion</p> 
                                <a asp-controller="Lugares" asp-action="Detalle" asp-route-id="@lugar.Id" class="btn-ver-mas">Ver más detalles</a>
                            </div>
                        </div>
                    }
                </div>
            </section>
        }

        @if (Model.GuarderiasFavoritas.Any())
        {
            <section class="service-section">
                <h2>Guarderías</h2>
                <div class="favorites-grid">
                    @foreach (var guarderia in Model.GuarderiasFavoritas)
                    {
                        <div class="item-card" id="favorito-guarderia-@guarderia.Id">
                             <button class="remove-favorito-btn" data-type="guarderia" data-id="@guarderia.Id" title="Quitar de favoritos">
                                 <span class="material-symbols-outlined">favorite</span>
                             </button>

                            <img src="@guarderia.UrlImagenPrincipal" alt="Imagen de @guarderia.Nombre" class="item-imagen" />
                            <div class="item-contenido">
                                <h3 class="item-nombre">@guarderia.Nombre</h3>
                                <p class="item-ubicacion">@guarderia.Ubicacion</p>
                                <a asp-controller="Guarderias" asp-action="Detalle" asp-route-id="@guarderia.Id" class="btn-ver-mas">Ver más detalles</a>
                            </div>
                        </div>
                    }
                </div>
            </section>
        }
        
        @if (!Model.LugaresFavoritos.Any() && !Model.GuarderiasFavoritas.Any() && !Model.NoticiasFavoritas.Any() && !string.IsNullOrEmpty(searchString))
        {
            <p style="text-align: center; font-size: 1.2rem; color: #555; margin-top: 2rem;">
                No se encontraron favoritos que coincidan con "@searchString".
            </p>
        }
    }
    else
    {
        <div class="empty-favorites-container">
            <h2>Tu lista de favoritos está vacía</h2>
            <p>¡Guarda los mejores lugares, noticias y servicios para tenerlos siempre a la mano!</p>
            <a asp-controller="Home" asp-action="Index" class="explore-button">Explorar Servicios</a>
        </div>
    }
</div>

<div id="modal-confirmar-uno" class="modal-confirmacion-eliminar" style="display: none;">
    <div class="modal-contenido">
        <span class="modal-cerrar-eliminar" id="btn-cerrar-modal-uno">&times;</span>
        <h3 class="modal-titulo-eliminar">Confirmar Acción</h3>
        <p class="modal-mensaje-eliminar">¿Estás seguro de que deseas quitar "<span id="nombre-item-uno" style="font-weight: bold;">este item</span>" de tus favoritos?</p>
        <div class="modal-botones-eliminar">
            <button id="btn-confirmar-uno" class="btn-modal-accion btn-modal-confirmar">Quitar</button>
            <button id="btn-cancelar-uno" class="btn-modal-accion btn-modal-cancelar">Cancelar</button>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    
    // Variables para el modal de ELIMINAR UNO
    const modalConfirmarUno = document.getElementById('modal-confirmar-uno');
    const btnCerrarModalUno = document.getElementById('btn-cerrar-modal-uno');
    const btnConfirmarUno = document.getElementById('btn-confirmar-uno');
    const btnCancelarUno = document.getElementById('btn-cancelar-uno');
    const nombreItemUnoSpan = document.getElementById('nombre-item-uno');
    let itemParaEliminar = null; // Guardará { id, type, cardElement, nombre }

    const removeButtons = document.querySelectorAll('.remove-favorito-btn'); 
    const tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');

    function mostrarModalConfirmarUno(id, type, cardElement, nombre) {
        itemParaEliminar = { id, type, cardElement, nombre }; 
        if (nombreItemUnoSpan) {
             nombreItemUnoSpan.textContent = nombre || "este item"; 
        }
        if (modalConfirmarUno) modalConfirmarUno.style.display = 'flex';
        if (btnConfirmarUno) btnConfirmarUno.disabled = false;
    }

    function ocultarModalConfirmarUno() {
        if (modalConfirmarUno) modalConfirmarUno.style.display = 'none';
        itemParaEliminar = null; 
        if (btnConfirmarUno) btnConfirmarUno.disabled = false;
    }

    if (btnCerrarModalUno) btnCerrarModalUno.addEventListener('click', ocultarModalConfirmarUno);
    if (btnCancelarUno) btnCancelarUno.addEventListener('click', ocultarModalConfirmarUno);
    window.addEventListener('click', function(event) { 
        if (event.target == modalConfirmarUno) {
            ocultarModalConfirmarUno();
        }
    });

    if (btnConfirmarUno) {
        btnConfirmarUno.addEventListener('click', async function() {
            if (!itemParaEliminar) return; 

            btnConfirmarUno.disabled = true; 
            const { id, type, cardElement } = itemParaEliminar;
            const token = tokenInput ? tokenInput.value : null;

            if (!token) {
                 console.error('AntiForgeryToken no encontrado.');
                 alert('Error de seguridad. Recarga la página.');
                 ocultarModalConfirmarUno();
                 return;
            }
            
            let url = '';
            let contentType = 'application/json'; // Por defecto
            let bodyContent = ''; 

            if (type === 'lugar') {
                url = '/Lugares/ToggleFavorito'; 
                // Asumiendo que LugaresController espera [FromForm] lugarId=X
                contentType = 'application/x-www-form-urlencoded'; 
                bodyContent = `lugarId=${id}`; 
            } else if (type === 'guarderia') {
                url = '/Guarderias/ToggleFavorito'; 
                // Asumiendo que GuarderiasController espera [FromForm] guarderiaId=X
                contentType = 'application/x-www-form-urlencoded'; 
                bodyContent = `guarderiaId=${id}`; 
            } else if (type === 'noticia') {
                url = '/Noticias/ToggleFavorito';
                 // NoticiasController fue ajustado para [FromForm] noticiaId=X
                 contentType = 'application/x-www-form-urlencoded';
                 bodyContent = `noticiaId=${id}`;
            } else {
                console.error('Tipo desconocido:', type);
                ocultarModalConfirmarUno();
                return; 
            }

            try {
                const response = await fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-Type': contentType, // <-- Usamos el ContentType correcto
                        'RequestVerificationToken': token
                    },
                    body: bodyContent // <-- Usamos el body correcto
                });

                ocultarModalConfirmarUno(); 

                if (!response.ok) { throw new Error(`HTTP error! status: ${response.status}`); }
                
                const result = await response.json();
                
                // Ahora todos deberían devolver 'agregado' (o 'esFavorito' para noticias si no lo cambiaste)
                const seQuito = result.success && (result.agregado === false || result.esFavorito === false); 

                if (seQuito) { 
                    if(cardElement) { 
                        cardElement.style.transition = 'opacity 0.5s, transform 0.5s';
                        cardElement.style.opacity = '0';
                        cardElement.style.transform = 'scale(0.9)';
                        setTimeout(() => {
                            cardElement.remove();
                            if(document.querySelectorAll('.item-card').length === 0) {
                                window.location.reload(); 
                            }
                        }, 500);
                    }
                } else {
                    alert("Hubo un error al quitar el favorito."); 
                }
            } catch (error) {
                ocultarModalConfirmarUno();
                console.error('Error al quitar favorito:', error);
                alert('Error de conexión al quitar el favorito.'); 
            } finally {
                 if (btnConfirmarUno) btnConfirmarUno.disabled = false; // Re-habilitar siempre
            }
        });
    }

    removeButtons.forEach(btn => {
        btn.addEventListener('click', function(event) { 
            event.preventDefault(); 
            const id = this.dataset.id;
            const type = this.dataset.type; 
            const cardElement = this.closest('.item-card'); 
            const nombreElement = cardElement ? cardElement.querySelector('.item-nombre') : null;
            const nombre = nombreElement ? nombreElement.textContent.trim() : null; 

            mostrarModalConfirmarUno(id, type, cardElement, nombre); 
        });
    });


});
</script>